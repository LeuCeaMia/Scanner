/* The following code was generated by JFlex 1.6.0 */

/* Based on the code for Java 1.2 Language lexer specification by Gerwin Klein <lsf@jflex.de>                    *
/* C-lestia draft lexer specification
*/

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/LCM/Documents/NetBeansProjects/ClestiaScannerRC1/src/clestiascannerrc1/Clestia.flex</tt>
 */
public class Scanner extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\100\1\101\1\1\16\6\4\0\1\3\1\56"+
    "\1\14\1\0\1\5\1\67\1\62\1\15\1\43\1\44\1\65\1\64"+
    "\1\52\1\13\1\11\1\4\1\7\1\71\1\70\1\75\1\72\1\10"+
    "\1\76\1\73\1\74\1\10\1\61\1\51\1\55\1\53\1\54\1\60"+
    "\1\0\3\5\1\77\1\12\1\42\15\5\1\41\6\5\1\47\1\16"+
    "\1\50\1\66\1\5\1\0\1\23\1\17\1\25\1\30\1\22\1\34"+
    "\1\5\1\26\1\31\2\5\1\21\1\5\1\24\1\20\1\32\1\5"+
    "\1\27\1\33\1\35\1\36\1\37\1\40\3\5\1\45\1\63\1\46"+
    "\1\57\6\6\1\102\32\6\2\0\4\5\4\0\1\5\2\0\1\6"+
    "\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5"+
    "\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0\160\6"+
    "\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5\1\0"+
    "\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\6\2\0"+
    "\236\5\11\0\46\5\2\0\1\5\7\0\47\5\11\0\55\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0\33\5\5\0"+
    "\3\5\15\0\4\6\7\0\1\5\4\0\13\6\5\0\53\5\37\6"+
    "\4\0\2\5\1\6\143\5\1\0\1\5\10\6\1\0\6\6\2\5"+
    "\2\6\1\0\4\6\2\5\12\6\3\5\2\0\1\5\17\0\1\6"+
    "\1\5\1\6\36\5\33\6\2\0\131\5\13\6\1\5\16\0\12\6"+
    "\41\5\11\6\2\5\4\0\1\5\5\0\26\5\4\6\1\5\11\6"+
    "\1\5\3\6\1\5\5\6\22\0\31\5\3\6\244\0\4\6\66\5"+
    "\3\6\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6\1\0"+
    "\7\5\1\0\7\5\1\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5"+
    "\1\0\3\5\2\6\2\0\12\6\4\5\7\0\1\5\5\0\3\6"+
    "\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6"+
    "\2\0\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6"+
    "\3\5\1\6\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6"+
    "\1\0\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0"+
    "\12\6\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0"+
    "\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\6\3\0"+
    "\3\6\1\0\4\6\2\0\1\5\6\0\1\6\16\0\12\6\11\0"+
    "\1\5\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6"+
    "\7\0\2\6\1\0\2\5\6\0\2\5\2\6\2\0\12\6\22\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\7\0\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5"+
    "\17\0\2\6\1\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5"+
    "\7\6\1\0\3\6\1\0\4\6\1\5\10\0\1\6\10\0\2\5"+
    "\2\6\2\0\12\6\12\0\6\5\2\0\2\6\1\0\22\5\3\0"+
    "\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0"+
    "\6\6\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6"+
    "\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0"+
    "\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0"+
    "\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0"+
    "\4\5\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0"+
    "\1\5\1\0\6\6\2\0\12\6\2\0\2\5\42\0\1\5\27\0"+
    "\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\10\5\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6"+
    "\1\0\44\6\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0"+
    "\6\5\4\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6"+
    "\15\5\14\6\1\5\17\6\2\0\46\5\12\0\53\5\1\0\1\5"+
    "\3\0\u0149\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5"+
    "\2\0\103\5\2\0\3\6\40\0\20\5\20\0\125\5\14\0\u026c\5"+
    "\2\0\21\5\1\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5"+
    "\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0"+
    "\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5"+
    "\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0"+
    "\130\5\10\0\51\5\1\6\1\5\5\0\106\5\12\0\35\5\3\0"+
    "\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5\13\0\54\5"+
    "\4\0\21\6\7\5\2\6\6\0\12\6\46\0\27\5\5\6\4\0"+
    "\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0\1\5"+
    "\130\0\5\6\57\5\21\6\7\5\4\0\12\6\21\0\11\6\14\0"+
    "\3\6\36\5\12\6\3\0\2\5\12\6\6\0\46\5\16\6\14\0"+
    "\44\5\24\6\10\0\12\6\3\0\3\5\12\6\44\5\122\0\3\6"+
    "\1\0\25\6\4\5\1\6\4\5\1\6\15\0\300\5\47\6\25\0"+
    "\4\6\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0\5\6"+
    "\30\0\1\100\1\100\5\6\20\0\2\5\23\0\1\5\13\0\5\6"+
    "\5\0\6\6\1\0\1\5\15\0\1\5\20\0\15\5\3\0\32\5"+
    "\26\0\15\6\4\0\1\6\3\0\14\6\21\0\1\5\4\0\1\5"+
    "\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5"+
    "\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5"+
    "\6\0\4\5\3\6\16\0\46\5\12\0\66\5\11\0\1\5\17\0"+
    "\1\6\27\5\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\40\6"+
    "\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\6\1\0\5\5\2\0"+
    "\5\5\4\0\126\5\2\0\2\6\2\0\3\5\1\0\132\5\1\0"+
    "\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0"+
    "\u19b6\5\112\0\u51cc\5\64\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0"+
    "\20\5\12\6\2\5\24\0\57\5\1\6\14\0\2\6\1\0\31\5"+
    "\10\0\120\5\2\6\45\0\11\5\2\0\147\5\2\0\4\5\1\0"+
    "\2\5\16\0\12\5\120\0\10\5\1\6\3\5\1\6\4\5\1\6"+
    "\27\5\5\6\20\0\1\5\7\0\64\5\14\0\2\6\62\5\21\6"+
    "\13\0\12\6\6\0\22\6\6\5\3\0\1\5\4\0\12\6\34\5"+
    "\10\6\2\0\27\5\15\6\14\0\35\5\3\0\4\6\57\5\16\6"+
    "\16\0\1\5\12\6\46\0\51\5\16\6\11\0\3\5\1\6\10\5"+
    "\2\6\2\0\12\6\6\0\27\5\3\0\1\5\1\6\4\0\60\5"+
    "\1\6\1\5\3\6\2\5\2\6\5\5\2\6\1\5\1\6\1\5"+
    "\30\0\3\5\43\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5"+
    "\1\0\7\5\221\0\43\5\10\6\1\0\2\6\2\0\12\6\6\0"+
    "\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u012e\5\2\0\76\5\2\0"+
    "\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\6\12\5\1\0"+
    "\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5\3\0"+
    "\20\6\20\0\7\6\14\0\2\5\30\0\3\5\31\0\1\5\6\0"+
    "\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0\12\6\7\0"+
    "\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0\6\5\2\0"+
    "\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0"+
    "\3\6\4\0\14\5\1\0\32\5\1\0\23\5\1\0\2\5\1\0"+
    "\17\5\2\0\16\5\42\0\173\5\105\0\65\5\210\0\1\6\202\0"+
    "\35\5\3\0\61\5\57\0\37\5\21\0\33\5\65\0\36\5\2\0"+
    "\44\5\4\0\10\5\1\0\5\5\52\0\236\5\2\0\12\6\u0356\0"+
    "\6\5\2\0\1\5\1\0\54\5\1\0\2\5\3\0\1\5\2\0"+
    "\27\5\252\0\26\5\12\0\32\5\306\0\1\5\3\6\1\0\2\6"+
    "\5\0\4\6\4\5\1\0\3\5\1\0\33\5\4\0\3\6\4\0"+
    "\1\6\40\0\35\5\203\0\66\5\12\0\26\5\12\0\23\5\215\0"+
    "\111\5\u03b7\0\3\6\65\5\17\6\37\0\12\6\20\0\3\6\55\5"+
    "\13\6\2\0\1\6\u0f42\0\u036f\5\221\0\143\5\u0b9d\0\u042f\5\u33d1\0"+
    "\u0239\5\u45c7\0\2\5\u2163\0\5\6\3\0\26\6\2\0\7\6\36\0"+
    "\4\6\224\0\3\6\u01bb\0\125\5\1\0\107\5\1\0\2\5\2\0"+
    "\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0"+
    "\7\5\1\0\101\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0"+
    "\34\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0\7\5\1\0"+
    "\u0154\5\2\0\31\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0"+
    "\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0"+
    "\31\5\1\0\10\5\2\0\62\6\u2800\0\ua6d7\5\51\0\u1035\5\13\0"+
    "\336\5\u3fe2\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\1\11\12\4\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\42\1\43\2\1\2\44\1\1"+
    "\1\2\2\45\1\0\1\46\1\47\1\0\5\4\1\50"+
    "\2\4\1\51\3\4\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\10\61\1\45\2\0\7\4"+
    "\1\73\2\4\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\0\1\4\1\104\1\105\1\106\2\4"+
    "\1\107\1\110\1\4\1\0\3\4\1\111\1\0\1\4"+
    "\1\112\1\4\1\0\1\113\1\4\1\0\1\114\2\0"+
    "\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\311\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\311\0\311\0\u02e1\0\u0324"+
    "\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c"+
    "\0\u0192\0\u0192\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\u057f\0\u05c2\0\u0605\0\u0648\0\311\0\311"+
    "\0\311\0\u068b\0\u06ce\0\u0711\0\311\0\311\0\311\0\u0754"+
    "\0\u0797\0\311\0\311\0\u07da\0\u081d\0\u0860\0\311\0\u08a3"+
    "\0\u08e6\0\u01d5\0\u0929\0\u096c\0\311\0\311\0\u09af\0\u09f2"+
    "\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0192\0\u0b41\0\u0b84\0\u0192"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"+
    "\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71"+
    "\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u0192\0\u1146"+
    "\0\u1189\0\311\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\u11cc\0\u120f\0\u0192\0\u0192\0\u0192\0\u1252\0\u1295"+
    "\0\u0192\0\u0192\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u0192"+
    "\0\u1427\0\u146a\0\u0192\0\u14ad\0\u14f0\0\u0192\0\u1533\0\u1576"+
    "\0\u0192\0\u15b9\0\u15fc\0\311";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\10\1\14\1\15\1\16\1\4\1\17\2\10"+
    "\1\20\1\10\1\21\1\22\1\10\1\23\1\24\1\25"+
    "\2\10\1\26\2\10\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\7\12\1\10\1\4\1\6"+
    "\1\4\1\60\1\61\1\62\11\60\1\63\1\60\1\64"+
    "\64\60\1\65\1\66\1\67\12\65\1\4\1\70\64\65"+
    "\105\0\1\6\104\0\1\71\103\0\4\10\1\0\1\10"+
    "\4\0\24\10\25\0\10\10\2\0\1\10\7\0\2\72"+
    "\1\73\1\74\7\0\1\74\5\0\1\75\37\0\7\72"+
    "\1\75\12\0\2\12\1\73\1\74\7\0\1\74\5\0"+
    "\1\75\37\0\7\12\1\75\12\0\2\73\57\0\7\73"+
    "\17\0\1\76\54\0\1\77\17\0\4\10\1\0\1\10"+
    "\4\0\1\10\1\100\22\10\25\0\10\10\2\0\1\10"+
    "\5\0\4\10\1\0\1\10\4\0\2\10\1\101\21\10"+
    "\25\0\10\10\2\0\1\10\5\0\4\10\1\0\1\10"+
    "\4\0\17\10\1\102\4\10\25\0\10\10\2\0\1\10"+
    "\5\0\4\10\1\0\1\10\4\0\7\10\1\103\14\10"+
    "\25\0\10\10\2\0\1\10\5\0\4\10\1\0\1\10"+
    "\4\0\3\10\1\104\20\10\25\0\10\10\2\0\1\10"+
    "\5\0\4\10\1\0\1\10\4\0\1\10\1\105\10\10"+
    "\1\106\11\10\25\0\10\10\2\0\1\10\5\0\4\10"+
    "\1\0\1\10\4\0\7\10\1\107\5\10\1\110\6\10"+
    "\25\0\10\10\2\0\1\10\5\0\4\10\1\0\1\10"+
    "\4\0\1\10\1\111\22\10\25\0\10\10\2\0\1\10"+
    "\5\0\4\10\1\0\1\10\4\0\1\10\1\112\22\10"+
    "\25\0\10\10\2\0\1\10\5\0\4\10\1\0\1\10"+
    "\4\0\7\10\1\113\14\10\25\0\10\10\2\0\1\10"+
    "\53\0\1\114\102\0\1\115\102\0\1\116\102\0\1\117"+
    "\111\0\1\120\103\0\1\121\103\0\1\122\16\0\1\60"+
    "\2\0\11\60\1\0\1\60\1\0\64\60\2\0\1\62"+
    "\100\0\1\123\2\0\11\123\1\124\1\125\1\126\1\127"+
    "\4\123\1\130\2\123\1\131\4\123\1\132\1\133\42\123"+
    "\20\0\1\134\67\0\1\67\100\0\1\123\2\0\11\123"+
    "\1\135\1\136\1\137\1\140\4\123\1\141\2\123\1\142"+
    "\4\123\1\143\1\144\42\123\3\0\1\71\1\5\1\6"+
    "\100\71\7\0\2\73\1\0\1\74\7\0\1\74\5\0"+
    "\1\75\37\0\7\73\1\75\12\0\2\145\2\0\1\146"+
    "\50\0\1\146\3\0\7\145\75\0\1\147\16\0\4\10"+
    "\1\0\1\10\4\0\1\10\1\150\22\10\25\0\10\10"+
    "\2\0\1\10\5\0\4\10\1\0\1\10\4\0\14\10"+
    "\1\151\7\10\25\0\10\10\2\0\1\10\5\0\4\10"+
    "\1\0\1\10\4\0\2\10\1\152\21\10\25\0\10\10"+
    "\2\0\1\10\5\0\4\10\1\0\1\10\4\0\4\10"+
    "\1\153\17\10\25\0\10\10\2\0\1\10\5\0\4\10"+
    "\1\0\1\10\4\0\16\10\1\154\5\10\25\0\10\10"+
    "\2\0\1\10\5\0\4\10\1\0\1\10\4\0\2\10"+
    "\1\155\21\10\25\0\10\10\2\0\1\10\5\0\4\10"+
    "\1\0\1\10\4\0\4\10\1\156\17\10\25\0\10\10"+
    "\2\0\1\10\5\0\4\10\1\0\1\10\4\0\10\10"+
    "\1\157\13\10\25\0\10\10\2\0\1\10\5\0\4\10"+
    "\1\0\1\10\4\0\12\10\1\160\11\10\25\0\10\10"+
    "\2\0\1\10\5\0\4\10\1\0\1\10\4\0\12\10"+
    "\1\161\11\10\25\0\10\10\2\0\1\10\15\0\1\162"+
    "\102\0\1\163\102\0\1\164\102\0\1\165\102\0\1\166"+
    "\102\0\1\167\102\0\1\170\102\0\1\171\74\0\2\145"+
    "\17\0\1\75\37\0\7\145\1\75\12\0\2\145\57\0"+
    "\7\145\76\0\1\172\15\0\4\10\1\0\1\10\4\0"+
    "\2\10\1\173\21\10\25\0\10\10\2\0\1\10\5\0"+
    "\4\10\1\0\1\10\4\0\3\10\1\174\20\10\25\0"+
    "\10\10\2\0\1\10\5\0\4\10\1\0\1\10\4\0"+
    "\2\10\1\175\21\10\25\0\10\10\2\0\1\10\5\0"+
    "\4\10\1\0\1\10\4\0\10\10\1\176\13\10\25\0"+
    "\10\10\2\0\1\10\5\0\4\10\1\0\1\10\4\0"+
    "\17\10\1\177\4\10\25\0\10\10\2\0\1\10\5\0"+
    "\4\10\1\0\1\10\4\0\12\10\1\200\11\10\25\0"+
    "\10\10\2\0\1\10\5\0\4\10\1\0\1\10\4\0"+
    "\13\10\1\201\10\10\25\0\10\10\2\0\1\10\5\0"+
    "\4\10\1\0\1\10\4\0\11\10\1\202\12\10\25\0"+
    "\10\10\2\0\1\10\5\0\4\10\1\0\1\10\4\0"+
    "\2\10\1\203\21\10\25\0\10\10\2\0\1\10\73\0"+
    "\1\204\14\0\4\10\1\0\1\10\4\0\3\10\1\205"+
    "\20\10\25\0\10\10\2\0\1\10\5\0\4\10\1\0"+
    "\1\10\4\0\10\10\1\206\13\10\25\0\10\10\2\0"+
    "\1\10\5\0\4\10\1\0\1\10\4\0\12\10\1\207"+
    "\11\10\25\0\10\10\2\0\1\10\5\0\4\10\1\0"+
    "\1\10\4\0\3\10\1\210\20\10\25\0\10\10\2\0"+
    "\1\10\72\0\1\211\15\0\4\10\1\0\1\10\4\0"+
    "\4\10\1\212\17\10\25\0\10\10\2\0\1\10\5\0"+
    "\4\10\1\0\1\10\4\0\5\10\1\213\16\10\25\0"+
    "\10\10\2\0\1\10\5\0\4\10\1\0\1\10\4\0"+
    "\7\10\1\214\14\10\25\0\10\10\2\0\1\10\74\0"+
    "\1\215\13\0\4\10\1\0\1\10\4\0\5\10\1\216"+
    "\16\10\25\0\10\10\2\0\1\10\5\0\4\10\1\0"+
    "\1\10\4\0\4\10\1\217\17\10\25\0\10\10\2\0"+
    "\1\10\75\0\1\220\12\0\4\10\1\0\1\10\4\0"+
    "\13\10\1\221\10\10\25\0\10\10\2\0\1\10\76\0"+
    "\1\222\76\0\1\223\104\0\1\224\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5695];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\6\1\2\11\14\1\10\11"+
    "\4\1\3\11\3\1\3\11\2\1\2\11\3\1\1\11"+
    "\4\1\1\0\2\11\1\0\14\1\21\11\11\1\2\0"+
    "\12\1\10\11\1\0\11\1\1\0\4\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2646) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 78: break;
        case 2: 
          { /* ignore */
          }
        case 79: break;
        case 3: 
          { return symbol(DIV);
          }
        case 80: break;
        case 4: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 81: break;
        case 5: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 82: break;
        case 6: 
          { return symbol(DOT);
          }
        case 83: break;
        case 7: 
          { return symbol(MINUS);
          }
        case 84: break;
        case 8: 
          { yybegin(STRING); string.setLength(0);
          }
        case 85: break;
        case 9: 
          { yybegin(CHARLITERAL);
          }
        case 86: break;
        case 10: 
          { return symbol(BOOLEAN_LITERAL, true);
          }
        case 87: break;
        case 11: 
          { return symbol(BOOLEAN_LITERAL, false);
          }
        case 88: break;
        case 12: 
          { return symbol(LPAREN);
          }
        case 89: break;
        case 13: 
          { return symbol(RPAREN);
          }
        case 90: break;
        case 14: 
          { return symbol(LBRACE);
          }
        case 91: break;
        case 15: 
          { return symbol(RBRACE);
          }
        case 92: break;
        case 16: 
          { return symbol(LBRACK);
          }
        case 93: break;
        case 17: 
          { return symbol(RBRACK);
          }
        case 94: break;
        case 18: 
          { return symbol(SEMICOLON);
          }
        case 95: break;
        case 19: 
          { return symbol(COMMA);
          }
        case 96: break;
        case 20: 
          { return symbol(EQ);
          }
        case 97: break;
        case 21: 
          { return symbol(GT);
          }
        case 98: break;
        case 22: 
          { return symbol(LT);
          }
        case 99: break;
        case 23: 
          { return symbol(NOT);
          }
        case 100: break;
        case 24: 
          { return symbol(COMP);
          }
        case 101: break;
        case 25: 
          { return symbol(QUESTION);
          }
        case 102: break;
        case 26: 
          { return symbol(COLON);
          }
        case 103: break;
        case 27: 
          { return symbol(AND);
          }
        case 104: break;
        case 28: 
          { return symbol(OR);
          }
        case 105: break;
        case 29: 
          { return symbol(PLUS);
          }
        case 106: break;
        case 30: 
          { return symbol(MULT);
          }
        case 107: break;
        case 31: 
          { return symbol(XOR);
          }
        case 108: break;
        case 32: 
          { return symbol(MOD);
          }
        case 109: break;
        case 33: 
          { string.append( yytext() );
          }
        case 110: break;
        case 34: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 111: break;
        case 35: 
          { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
          }
        case 112: break;
        case 36: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 113: break;
        case 37: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 114: break;
        case 38: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 115: break;
        case 39: 
          { return symbol(MINUSMINUS);
          }
        case 116: break;
        case 40: 
          { return symbol(DO);
          }
        case 117: break;
        case 41: 
          { return symbol(IF);
          }
        case 118: break;
        case 42: 
          { return symbol(EQEQ);
          }
        case 119: break;
        case 43: 
          { return symbol(GTEQ);
          }
        case 120: break;
        case 44: 
          { return symbol(LTEQ);
          }
        case 121: break;
        case 45: 
          { return symbol(NOTEQ);
          }
        case 122: break;
        case 46: 
          { return symbol(ANDAND);
          }
        case 123: break;
        case 47: 
          { return symbol(OROR);
          }
        case 124: break;
        case 48: 
          { return symbol(PLUSPLUS);
          }
        case 125: break;
        case 49: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 126: break;
        case 50: 
          { string.append( '\"' );
          }
        case 127: break;
        case 51: 
          { string.append( '\'' );
          }
        case 128: break;
        case 52: 
          { string.append( '\\' );
          }
        case 129: break;
        case 53: 
          { string.append( '\b' );
          }
        case 130: break;
        case 54: 
          { string.append( '\n' );
          }
        case 131: break;
        case 55: 
          { string.append( '\r' );
          }
        case 132: break;
        case 56: 
          { string.append( '\f' );
          }
        case 133: break;
        case 57: 
          { string.append( '\t' );
          }
        case 134: break;
        case 58: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
          }
        case 135: break;
        case 59: 
          { return symbol(FOR);
          }
        case 136: break;
        case 60: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
          }
        case 137: break;
        case 61: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
          }
        case 138: break;
        case 62: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
          }
        case 139: break;
        case 63: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
          }
        case 140: break;
        case 64: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
          }
        case 141: break;
        case 65: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
          }
        case 142: break;
        case 66: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
          }
        case 143: break;
        case 67: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
          }
        case 144: break;
        case 68: 
          { return symbol(ELSE);
          }
        case 145: break;
        case 69: 
          { return symbol(NULL_LITERAL);
          }
        case 146: break;
        case 70: 
          { return symbol(CHAR);
          }
        case 147: break;
        case 71: 
          { return symbol(INT);
          }
        case 148: break;
        case 72: 
          { return symbol(VOID);
          }
        case 149: break;
        case 73: 
          { return symbol(WHILE);
          }
        case 150: break;
        case 74: 
          { return symbol(RETURN);
          }
        case 151: break;
        case 75: 
          { return symbol(BOOLEAN);
          }
        case 152: break;
        case 76: 
          { return symbol(DOUBLE);
          }
        case 153: break;
        case 77: 
          { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    argv = new String[1];
    argv[0] = "test.txt";
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
